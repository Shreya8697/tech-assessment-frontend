import React, { useState, useEffect } from "react";
import Header from "./components/Header";
import ReadingSection from "./components/ReadingSection";
import MCQSection from "./components/MCQSection";
import StartButton from "./components/StartButton";
import SubmitButton from "./components/SubmitButton";
import Feedback from "./components/Feedback";
import "./App.css";
import img1 from "./assets/img1.jpg"
import img2 from "./assets/img2.jpg"



const App = () => {
  const [activeTab, setActiveTab] = useState("section1");
  const [timer, setTimer] = useState(0);
  const [isStarted, setIsStarted] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [score, setScore] = useState(0);
  const [feedback, setFeedback] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [answers, setAnswers] = useState({
    analysis1: "",
    analysis2: "",
    mcq1: "",
    mcq2: "",
    mcq3: "",
  });

  // Reading content
  const readingContent = {
    section1: `
        <h2 class="text-xl font-bold mb-4">The Impact of Artificial Intelligence</h2>
        <p class="mb-4">SkySoarer Airlines currently offers flights with service to a total of five cities: Abron, Bionia, Cordell, Dewark, and Epster. In the diagram, circles represent the five cities. Each line connecting two circles is a flight line that represents all the direct flights currently offered between the two corresponding cities, each of which is called a terminus for all flights represented by the line. Flights are offered in both directions for each flight line in the diagram, and all flights currently offered by SkySoarer are represented in the diagram. The label for each flight line shows the duration, in minutes, of each of the flights between the two cities the line connects, followed by the average annual revenue, in millions of dollars, generated by all SkySoarer flights between the two cities.
<p>If a direct flight is not available between a passenger's departure city and destination city, SkySoarer passengers may take a sequence of flights to arrive at their destination. The total flight time for such a trip is the sum of the durations of all flights on the trip.</p>
<img src="${img1}" alt="Flight Image"  class="image-section1">

`,
    section2: `
        <h2 class="text-xl font-bold mb-4">Future Implications</h2>
        <p class="mb-4">SkySoarer has conducted research to determine the merits of adding a single new flight line with direct flights in both directions between two currently serviced cities. SkySoarer has projected that adding a new line while making no other changes will reduce the annual revenue provided by all flight lines that share a terminus with the new line by 10%. The table shows information about each of the five proposed flight lines that have been researched by SkySoarer.</p>
      <img src="${img2}" alt="Flight Image"  class="image-section2">
        `,
  };

  // MCQ Questions
  const mcqQuestions = [
    {
      id: "mcq1",
      question:
        "1. SkySoarer has decided its new flight line should have a projected annual revenue of more than $20 million. The implementation of the line should also make it possible to travel between any two of the currently serviced cities by taking at most two flights. For each of the following proposed new lines, if, based on the information provided, the line satisfies these requirements, select Yes. Otherwise, select No.",
      options: [
        { value: "privacy", label: "Line AD", correct: true },
        { value: "cost", label: "Line BE", correct: false },
        { value: "speed", label: "Line DE", correct: false },
      ],
    },
    {
      id: "mcq2",
      question: "How does AI impact the workplace?",
      options: [
        {
          value: "automation",
          label: "Through automation and efficiency",
          correct: true,
        },
        {
          value: "decoration",
          label: "By improving office decoration",
          correct: false,
        },
        {
          value: "lighting",
          label: "By controlling office lighting",
          correct: false,
        },
        {
          value: "temperature",
          label: "By managing room temperature",
          correct: false,
        },
      ],
    },
    {
      id: "mcq3",
      question: "What future development is mentioned in the text?",
      options: [
        {
          value: "agi",
          label: "Artificial General Intelligence",
          correct: true,
        },
        {
          value: "teleportation",
          label: "Teleportation devices",
          correct: false,
        },
        { value: "time_travel", label: "Time travel machines", correct: false },
        { value: "flying_cars", label: "Flying cars", correct: false },
      ],
    },
  ];

  // Timer
  useEffect(() => {
    let interval;
    if (isStarted && !isSubmitted) {
      interval = setInterval(() => {
        setTimer((prev) => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isStarted, isSubmitted]);

  //  timer display
  // const formatTime = (seconds) => {
  //   const mins = Math.floor(seconds / 60);
  //   const secs = seconds % 60;
  //   return `${mins}:${secs.toString().padStart(2, "0")}`;
  // };

  //  badge based on score
  const getBadge = (score) => {
    if (score === 20)
      return { title: "Mythic Champion", color: "text-purple-600" };
    if (score >= 10) return { title: "Aspiring Hero", color: "text-blue-600" };
    return { title: "Lost Wanderer", color: "text-gray-600" };
  };

  // Calculate score
  const calculateScore = () => {
    let newScore = 0;
    let newFeedback = [];

    // MCQ scoring
    mcqQuestions.forEach((q) => {
      const correctOption = q.options.find((opt) => opt.correct);
      if (answers[q.id] === correctOption.value) {
        newScore += 4;
        newFeedback.push(`✓ Correct answer for question: "${q.question}"`);
      } else {
        newFeedback.push(
          `✗ Incorrect answer for question: "${q.question}". The correct answer was: "${correctOption.label}"`
        );
      }
    });

    return { score: newScore, feedback: newFeedback };
  };

  // Handle submission
  const handleSubmit = async () => {
    setIsSubmitting(true);
    const { score: finalScore, feedback: finalFeedback } = calculateScore();

    try {
      const response = await fetch(
        "http://localhost:5000/api/submit-assessment",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            answers,
            score: finalScore,
            timeSpent: timer,
          }),
        }
      );

      if (!response.ok) {
        throw new Error("Submission failed");
      }

      setScore(finalScore);
      setFeedback(finalFeedback);
      setIsSubmitted(true);
    } catch (error) {
      console.error("Error submitting assessment:", error);
      alert("Failed to submit assessment. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="Container">
      <Header
        timer={timer}
        score={score}
        isSubmitted={isSubmitted}
        getBadge={getBadge}
      />
      <div className="button-section">
        <StartButton isStarted={isStarted} setIsStarted={setIsStarted} />
        <SubmitButton
          isStarted={isStarted}
          isSubmitted={isSubmitted}
          handleSubmit={handleSubmit}
          isSubmitting={isSubmitting}
        />
      </div>

      <div className="content-wrapper">
        <ReadingSection
          activeTab={activeTab}
          setActiveTab={setActiveTab}
          readingContent={readingContent}
        />
        <MCQSection
          mcqQuestions={mcqQuestions}
          answers={answers}
          setAnswers={setAnswers}
          isStarted={isStarted}
          isSubmitted={isSubmitted}
        />
      </div>

      {isSubmitted && (
  <div className="feedback-section">
    <Feedback feedback={feedback} />
    <button 
      className="restart-button"
      onClick={() => window.location.reload()}
    >
      Close
    </button>
  </div>
)}

    </div>
  );
};

export default App;
